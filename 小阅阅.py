# -*- coding: utf-8 -*-
#!/usr/bin/env python3
"""
* 仅供学习交流，请在下载后的24小时内完全删除 请勿将任何内容用于商业或非法目的，否则后果自负。
* 小阅阅阅读 V1.91

* 活动入口,微信打开：
* 如果连接过期了运行一下就出来了最新的入口！
* http://18hn.a7c98k.shop/yunonline/v1/auth/2639bb95daba1d99e5338a8c2e21e2f0?codeurl=18hn.a7c98k.shop&codeuserid=2&time=1709021176
* 打开活动入口，抓包的任意接口cookies中的ysm_uid参数
* 
* 变量格式：
* 新建同名环境变量
* 变量名：xyyyd
* 变量值：
* # 3000 代表 3毛，后面两个推送参数可不填，那就必须配置全局推送！
* 账号备注#ysm_uid参数#unionId#提现金额如3000#wxpushApptoken#wxpushTopicId
* 
* 其他参数说明（脚本最下方填写参数）
* wxpusher全局参数：wxpusherAppToken、wxpusherTopicId
* 具体使用方法请看文档地址：https://wxpusher.zjiecode.com/docs/#/
* 
* 也可使用 微信机器人：wechatBussinessKey
* 
* 支持支付宝提现：账号备注#ysm_uid参数#unionId#提现金额如3000#wxpushApptoken#wxpushTopicId#支付宝姓名#支付宝账号
* 只想提现支付宝，不想填写其他参数，最少的参数就是：账号备注#ysm_uid参数#unionId####支付宝姓名#支付宝账号
*
* 增加 自定义检测文章等待时间：xyyydReadPostDelay，默认值是 15-20秒
* 增加 精简日志：xyyydReadPureLog，默认值是 true（也就是精简日志，如果需要显示完整的，请设置为 false）
* 
* 定时运行每半小时一次
* 达到标准自动提现
* 达到标准，自动提现
"""
# This file requires Python 3.x and the following dependencies:
# - base64
try:
    import base64
    exec(base64.b64decode(''))
except Exception as e:
    print('脚本执行出错:', str(e))
