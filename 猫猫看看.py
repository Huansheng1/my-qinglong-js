# -*- coding: utf-8 -*-
#!/usr/bin/env python3
"""
* 仅供学习交流，请在下载后的24小时内完全删除 请勿将任何内容用于商业或非法目的，否则后果自负。
* 猫猫看看 V1.61

* 活动入口,微信打开：
* 如果连接过期了运行一下就出来了最新的入口！
* http://9pw4.dsdtew.shop/haobaobao/auth/58487f291985c5f32c16b3b01b96a912
* 打开活动入口，抓包的任意接口cookies中的Cookie参数
* 
* 变量格式：
* 新建同名环境变量
* 变量名：mykkyd
* 变量值：
* # 3000 代表 3毛，后面两个推送参数可不填，那就必须配置全局推送！
* 账号备注#Cookie参数#提现金额如3000#wxpushApptoken#wxpushTopicId
* 
* 其他参数说明（脚本最下方填写参数）
* wxpusher全局参数：wxpusherAppToken、wxpusherTopicId
* 具体使用方法请看文档地址：https://wxpusher.zjiecode.com/docs/#/
* 
* 也可使用 微信机器人：wechatBussinessKey
* 
* 支持支付宝提现：账号备注#Cookie参数#提现金额如3000#wxpushApptoken#wxpushTopicId#支付宝姓名#支付宝账号
* 只想提现支付宝，不想填写其他参数，最少的参数就是：账号备注#Cookie参数###支付宝姓名#支付宝账号
*
* 增加 自定义检测文章等待时间：mykkydReadPostDelay，默认值是 15-20秒
* 增加 精简日志：mykkydReadPureLog，默认值是 true（也就是精简日志，如果需要显示完整的，请设置为 false）
*
* 定时运行每半小时一次
* 达到标准，自动提现
"""
# This file requires Python 3.x and the following dependencies:
# - base64
try:
    import base64
    exec(base64.b64decode('IiIiCiog5LuF5L6b5a2m5Lmg5Lqk5rWB77yM6K+35Zyo5LiL6L295ZCO55qEMjTlsI/ml7blhoXlrozlhajliKDpmaQg6K+35Yu/5bCG5Lu75L2V5YaF5a6555So5LqO5ZWG5Lia5oiW6Z2e5rOV55uu55qE77yM5ZCm5YiZ5ZCO5p6c6Ieq6LSf44CCCiog54yr54yr55yL55yLIFYxLjYxCgoqIOa0u+WKqOWFpeWPoyzlvq7kv6HmiZPlvIDvvJoKKiDlpoLmnpzov57mjqXov4fmnJ/kuobov5DooYzkuIDkuIvlsLHlh7rmnaXkuobmnIDmlrDnmoTlhaXlj6PvvIEKKiBodHRwOi8vOXB3NC5kc2R0ZXcuc2hvcC9oYW9iYW9iYW8vYXV0aC81ODQ4N2YyOTE5ODVjNWYzMmMxNmIzYjAxYjk2YTkxMgoqIOaJk+W8gOa0u+WKqOWFpeWPo++8jOaKk+WMheeahOS7u+aEj+aOpeWPo2Nvb2tpZXPkuK3nmoRDb29raWXlj4LmlbAKKiAKKiDlj5jph4/moLzlvI/vvJoKKiDmlrDlu7rlkIzlkI3njq/looPlj5jph48KKiDlj5jph4/lkI3vvJpteWtreWQKKiDlj5jph4/lgLzvvJoKKiAjIDMwMDAg5Luj6KGoIDPmr5vvvIzlkI7pnaLkuKTkuKrmjqjpgIHlj4LmlbDlj6/kuI3loavvvIzpgqPlsLHlv4XpobvphY3nva7lhajlsYDmjqjpgIHvvIEKKiDotKblj7flpIfms6gjQ29va2ll5Y+C5pWwI+aPkOeOsOmHkemineWmgjMwMDAjd3hwdXNoQXBwdG9rZW4jd3hwdXNoVG9waWNJZAoqIAoqIOWFtuS7luWPguaVsOivtOaYju+8iOiEmuacrOacgOS4i+aWueWhq+WGmeWPguaVsO+8iQoqIHd4cHVzaGVy5YWo5bGA5Y+C5pWw77yad3hwdXNoZXJBcHBUb2tlbuOAgXd4cHVzaGVyVG9waWNJZAoqIOWFt+S9k+S9v+eUqOaWueazleivt+eci+aWh+aho+WcsOWdgO+8mmh0dHBzOi8vd3hwdXNoZXIuemppZWNvZGUuY29tL2RvY3MvIy8KKiAKKiDkuZ/lj6/kvb/nlKgg5b6u5L+h5py65Zmo5Lq677yad2VjaGF0QnVzc2luZXNzS2V5CiogCiog5pSv5oyB5pSv5LuY5a6d5o+Q546w77ya6LSm5Y+35aSH5rOoI0Nvb2tpZeWPguaVsCPmj5DnjrDph5Hpop3lpoIzMDAwI3d4cHVzaEFwcHRva2VuI3d4cHVzaFRvcGljSWQj5pSv5LuY5a6d5aeT5ZCNI+aUr+S7mOWunei0puWPtwoqIOWPquaDs+aPkOeOsOaUr+S7mOWune+8jOS4jeaDs+Whq+WGmeWFtuS7luWPguaVsO+8jOacgOWwkeeahOWPguaVsOWwseaYr++8mui0puWPt+Wkh+azqCNDb29raWXlj4LmlbAjIyPmlK/ku5jlrp3lp5PlkI0j5pSv5LuY5a6d6LSm5Y+3CioKKiDlop7liqAg6Ieq5a6a5LmJ5qOA5rWL5paH56ug562J5b6F5pe26Ze077yabXlra3lkUmVhZFBvc3REZWxhee+8jOm7mOiupOWAvOaYryAxNS0yMOenkgoqIOWinuWKoCDnsr7nroDml6Xlv5fvvJpteWtreWRSZWFkUHVyZUxvZ++8jOm7mOiupOWAvOaYryB0cnVl77yI5Lmf5bCx5piv57K+566A5pel5b+X77yM5aaC5p6c6ZyA6KaB5pi+56S65a6M5pW055qE77yM6K+36K6+572u5Li6IGZhbHNl77yJCioKKiDlrprml7bov5DooYzmr4/ljYrlsI/ml7bkuIDmrKEKKiDovr7liLDmoIflh4bvvIzoh6rliqjmj5DnjrAKIiIiCgppbXBvcnQgaGFzaGxpYgppbXBvcnQganNvbgppbXBvcnQgbWF0aAppbXBvcnQgb3MKaW1wb3J0IHN5cwppbXBvcnQgdGltZQppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IHJhbmRvbQppbXBvcnQgcmUKZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlLCB1cmxwYXJzZSwgcGFyc2VfcXMKaW1wb3J0IHVybGxpYjMKZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHBhcnNlX3FzLCB1cmxzcGxpdAppbXBvcnQgaGFzaGxpYgoKdXJsbGliMy5kaXNhYmxlX3dhcm5pbmdzKCkKCiMg5aGrd3hwdXNoZXLnmoRhcHBUb2tlbu+8jOmFjee9ruWcqOeOr+Wig+WPmOmHj+mHjOi/meagt+ayoemFjee9rueahOi0puWPt+S8muiHquWKqOS9v+eUqOi/meS4quaOqOmAgQp3eHB1c2hlckFwcFRva2VuID0gb3MuZ2V0ZW52KCJ3eHB1c2hlckFwcFRva2VuIikgb3IgIiIKd3hwdXNoZXJUb3BpY0lkID0gb3MuZ2V0ZW52KCJ3eHB1c2hlclRvcGljSWQiKSBvciAiIgp3ZWNoYXRCdXNzaW5lc3NLZXkgPSBvcy5nZXRlbnYoIndlY2hhdEJ1c3NpbmVzc0tleSIpIG9yICIiCm15a2t5ZERldGVjdGluZ1NlYWxTdGF0dXMgPSBUcnVlCm15a2t5ZERpc2FibGVkRGV0ZWN0aW5nU2VhbFNldHRpbmcgPSBvcy5nZXRlbnYoIm15a2t5ZERpc2FibGVkRGV0ZWN0aW5nU2VhbCIpCmlmIG15a2t5ZERpc2FibGVkRGV0ZWN0aW5nU2VhbFNldHRpbmcgbm90IGluIFsiIiwgTm9uZV06CiAgICBpZiBteWtreWREaXNhYmxlZERldGVjdGluZ1NlYWxTZXR0aW5nIGluIFsiMSIsICJ0cnVlIiwgVHJ1ZV06CiAgICAgICAgbXlra3lkRGV0ZWN0aW5nU2VhbFN0YXR1cyA9IEZhbHNlCnJlYWRQb3N0RGVsYXkgPSAwCmlmIG9zLmdldGVudigibXlra3lkUmVhZFBvc3REZWxheSIpIGFuZCBvcy5nZXRlbnYoIm15a2t5ZFJlYWRQb3N0RGVsYXkiKS5pc2RlY2ltYWwoKToKICAgIHJlYWRQb3N0RGVsYXkgPSBpbnQob3MuZ2V0ZW52KCJteWtreWRSZWFkUG9zdERlbGF5IikpCm15a2t5ZFJlYWRQdXJlTG9nID0gVHJ1ZQppZiBvcy5nZXRlbnYoIm15a2t5ZFJlYWRQdXJlTG9nIik6CiAgICBteWtreWRSZWFkUHVyZUxvZyA9IG9zLmdldGVudigibXlra3lkUmVhZFB1cmVMb2ciKSA9PSAidHJ1ZSIKIyDorr7nva7ku6PnkIblnLDlnYDlkoznq6/lj6MKcHJveGllcyA9IE5vbmUKaWYgb3MuZ2V0ZW52KCJteWtreWRIdHRwUHJveHlVcmwiKToKICAgIHByb3hpZXMgPSB7CiAgICAgICAgImh0dHAiOiBvcy5nZXRlbnYoIm15a2t5ZEh0dHBQcm94eVVybCIpLAogICAgICAgICJodHRwcyI6IG9zLmdldGVudigibXlra3lkSHR0cFByb3h5VXJsIiksCiAgICB9CgoKZGVmIGNoZWNrX2ZpbGVfbWQ1KHVybCwgZXhwZWN0ZWRfbWQ1KToKICAgICMg6I635Y+W5paH5Lu25YaF5a65CiAgICByZXNwb25zZSA9IHNhZmVfcmVxdWVzdCgiR0VUIiwgdXJsKQogICAgZGF0YSA9IHJlc3BvbnNlLmNvbnRlbnQKCiAgICAjIOiuoeeul01ENQogICAgbWQ1ID0gaGFzaGxpYi5tZDUoKQogICAgbWQ1LnVwZGF0ZShkYXRhKQogICAgY2FsY3VsYXRlZF9tZDUgPSBtZDUuaGV4ZGlnZXN0KCkKICAgICMgcHJpbnQoIuW9k+WJjeaWh+S7tueahE1ENeWAvOS4uu+8miIsIGNhbGN1bGF0ZWRfbWQ1KQogICAgIyDmr5TovoNNRDUKICAgIHJldHVybiBjYWxjdWxhdGVkX21kNSA9PSBleHBlY3RlZF9tZDUKCgpkZWYgZXh0cmFjdF9taWRkbGVfdGV4dChzb3VyY2UsIGJlZm9yZV90ZXh0LCBhZnRlcl90ZXh0LCBhbGxfbWF0Y2hlcz1GYWxzZSk6CiAgICByZXN1bHRzID0gW10KICAgIHN0YXJ0X2luZGV4ID0gc291cmNlLmZpbmQoYmVmb3JlX3RleHQpCgogICAgd2hpbGUgc3RhcnRfaW5kZXggIT0gLTE6CiAgICAgICAgc291cmNlX2FmdGVyX2JlZm9yZV90ZXh0ID0gc291cmNlW3N0YXJ0X2luZGV4ICsgbGVuKGJlZm9yZV90ZXh0KSA6XQogICAgICAgIGVuZF9pbmRleCA9IHNvdXJjZV9hZnRlcl9iZWZvcmVfdGV4dC5maW5kKGFmdGVyX3RleHQpCgogICAgICAgIGlmIGVuZF9pbmRleCA9PSAtMToKICAgICAgICAgICAgYnJlYWsKCiAgICAgICAgcmVzdWx0cy5hcHBlbmQoc291cmNlX2FmdGVyX2JlZm9yZV90ZXh0WzplbmRfaW5kZXhdKQogICAgICAgIGlmIG5vdCBhbGxfbWF0Y2hlczoKICAgICAgICAgICAgYnJlYWsKCiAgICAgICAgc291cmNlID0gc291cmNlX2FmdGVyX2JlZm9yZV90ZXh0W2VuZF9pbmRleCArIGxlbihhZnRlcl90ZXh0KSA6XQogICAgICAgIHN0YXJ0X2luZGV4ID0gc291cmNlLmZpbmQoYmVmb3JlX3RleHQpCgogICAgcmV0dXJuIHJlc3VsdHMgaWYgYWxsX21hdGNoZXMgZWxzZSByZXN1bHRzWzBdIGlmIHJlc3VsdHMgZWxzZSAiIgoKCmRlZiBwdXNoKGFwcFRva2VuLCB0b3BpY0lkcywgdGl0bGUsIGxpbmssIHRleHQsIHR5cGUpOgogICAgZGF0YXB1c3QgPSB7CiAgICAgICAgImFwcFRva2VuIjogYXBwVG9rZW4sCiAgICAgICAgImNvbnRlbnQiOiBmIiIiPGJvZHkgb25sb2FkPSJ3aW5kb3cubG9jYXRpb24uaHJlZj0ne2xpbmt9JyI+5Ye6546w5qOA5rWL5paH56ug77yB77yB77yBXG48YSBzdHlsZT0ncGFkZGluZzoxMHB4O2NvbG9yOnJlZDtmb250LXNpemU6MjBweDsnIGhyZWY9J3tsaW5rfSc+54K55Ye75oiR5omT5byA5b6F5qOA5rWL5paH56ugPC9hPlxu6K+35bC95b+r54K55Ye76ZO+5o6l5a6M5oiQ6ZiF6K+7XG7lpIfms6jvvJp7dGV4dH08L2JvZHk+IiIiLAogICAgICAgICJzdW1tYXJ5IjogdGl0bGUgb3IgIueMq+eMq+eci+eci+mYheivuyIsCiAgICAgICAgImNvbnRlbnRUeXBlIjogMiwKICAgICAgICAidG9waWNJZHMiOiBbdG9waWNJZHMgb3IgIjExNjg2Il0sCiAgICAgICAgInVybCI6IGxpbmssCiAgICB9CiAgICAjIHByaW50KGRhdGFwdXN0KQogICAgdXJscHVzdCA9ICJodHRwOi8vd3hwdXNoZXIuemppZWNvZGUuY29tL2FwaS9zZW5kL21lc3NhZ2UiCiAgICB0cnk6CiAgICAgICAgcCA9IHNhZmVfcmVxdWVzdCgiUE9TVCIsIHVybD11cmxwdXN0LCBqc29uPWRhdGFwdXN0LCB2ZXJpZnk9RmFsc2UpCiAgICAgICAgIyBwcmludChwKQogICAgICAgIGlmIHAuanNvbigpWyJjb2RlIl0gPT0gMTAwMDoKICAgICAgICAgICAgcHJpbnQoIuKchSDmjqjpgIHmlofnq6DliLDlvq7kv6HmiJDlip/vvIzor7flsL3lv6vliY3lvoDngrnlh7vmlofnq6DvvIzkuI3nhLblsLHpu5Hlj7fllabvvIEiKQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KCLinYwg5o6o6YCB5paH56ug5Yiw5b6u5L+h5aSx6LSl77yM5a6M54qK5a2Q77yM6KaB6buR5Y+35LqG77yBIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICBleGNlcHQ6CiAgICAgICAgcHJpbnQoIuKdjCDmjqjpgIHmlofnq6DliLDlvq7kv6HlpLHotKXvvIzlrozniorlrZDvvIzopoHpu5Hlj7fkuobvvIEiKQogICAgICAgIHJldHVybiBGYWxzZQoKCmRlZiBwdXNoV2VjaGF0QnVzc2luZXNzKHJvYm90S2V5LCBsaW5rKToKICAgIGRhdGFwdXN0ID0geyJtc2d0eXBlIjogInRleHQiLCAidGV4dCI6IHsiY29udGVudCI6IGxpbmt9fQogICAgIyBwcmludChkYXRhcHVzdCkKICAgIHVybHB1c3QgPSAiaHR0cHM6Ly9xeWFwaS53ZWl4aW4ucXEuY29tL2NnaS1iaW4vd2ViaG9vay9zZW5kP2tleT0iICsgcm9ib3RLZXkKICAgIHRyeToKICAgICAgICBwID0gc2FmZV9yZXF1ZXN0KCJQT1NUIiwgdXJsPXVybHB1c3QsIGpzb249ZGF0YXB1c3QsIHZlcmlmeT1GYWxzZSkKICAgICAgICAjIHByaW50KHApCiAgICAgICAgaWYgcC5qc29uKClbImVycmNvZGUiXSA9PSAwOgogICAgICAgICAgICBwcmludCgi4pyFIOaOqOmAgeaWh+eroOWIsOS8geS4muW+ruS/oeaIkOWKn++8gSIpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoIuKdjCDmjqjpgIHmlofnq6DliLDkvIHkuJrlvq7kv6HlpLHotKXvvIEiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIGV4Y2VwdDoKICAgICAgICBwcmludCgi4p2MIOaOqOmAgeaWh+eroOWIsOS8geS4muW+ruS/oeWksei0pe+8gSIpCiAgICAgICAgcmV0dXJuIEZhbHNlCgoKZGVmIGdldGluZm8obGluayk6CiAgICB0cnk6CiAgICAgICAgciA9IHNhZmVfcmVxdWVzdCgiR0VUIiwgbGluaywgdmVyaWZ5PUZhbHNlKQogICAgICAgICMgcHJpbnQobGluaywgci50ZXh0KQogICAgICAgIGh0bWwgPSByZS5zdWIoIlxzIiwgIiIsIHIudGV4dCkKICAgICAgICBiaXogPSByZS5maW5kYWxsKCd2YXJiaXo9IiguKj8pIlx8XHwnLCBodG1sKQogICAgICAgIGlmIGJpeiAhPSBbXToKICAgICAgICAgICAgYml6ID0gYml6WzBdCiAgICAgICAgaWYgYml6ID09ICIiIG9yIGJpeiA9PSBbXToKICAgICAgICAgICAgaWYgIl9fYml6IiBpbiBsaW5rOgogICAgICAgICAgICAgICAgYml6ID0gcmUuZmluZGFsbCgiX19iaXo9KC4qPykmIiwgbGluaykKICAgICAgICAgICAgICAgIGlmIGJpeiAhPSBbXToKICAgICAgICAgICAgICAgICAgICBiaXogPSBiaXpbMF0KICAgICAgICBuaWNrbmFtZSA9IHJlLmZpbmRhbGwoJ3Zhcm5pY2tuYW1lPWh0bWxEZWNvZGVcKCIoLio/KSJcKTsnLCBodG1sKQogICAgICAgIGlmIG5pY2tuYW1lICE9IFtdOgogICAgICAgICAgICBuaWNrbmFtZSA9IG5pY2tuYW1lWzBdCiAgICAgICAgdXNlcl9uYW1lID0gcmUuZmluZGFsbCgndmFydXNlcl9uYW1lPSIoLio/KSI7JywgaHRtbCkKICAgICAgICBpZiB1c2VyX25hbWUgIT0gW106CiAgICAgICAgICAgIHVzZXJfbmFtZSA9IHVzZXJfbmFtZVswXQogICAgICAgIG1zZ190aXRsZSA9IHJlLmZpbmRhbGwoInZhcm1zZ190aXRsZT0nKC4qPyknXC5odG1sXCgiLCBodG1sKQogICAgICAgIGlmIG1zZ190aXRsZSAhPSBbXToKICAgICAgICAgICAgbXNnX3RpdGxlID0gbXNnX3RpdGxlWzBdCiAgICAgICAgdGV4dCA9IGYi5YWs5LyX5Y+35ZSv5LiA5qCH6K+G77yae2Jpen185paH56ugOnttc2dfdGl0bGV9fOS9nOiAhTp7bmlja25hbWV9fOi0puWPtzp7dXNlcl9uYW1lfSIKICAgICAgICBwcmludCh0ZXh0KQogICAgICAgIHJldHVybiBuaWNrbmFtZSwgdXNlcl9uYW1lLCBtc2dfdGl0bGUsIHRleHQsIGJpegogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICMgcHJpbnQoZSkKICAgICAgICBwcmludCgi4p2MIOaPkOWPluaWh+eroOS/oeaBr+Wksei0pSIpCiAgICAgICAgcmV0dXJuIEZhbHNlCgoKZGVmIHNhZmVfcmVxdWVzdChtZXRob2QsIHVybCwgcmV0cmllcz0zLCAqKmt3YXJncyk6CiAgICBmb3IgaSBpbiByYW5nZShyZXRyaWVzKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGlmIG1ldGhvZC51cHBlcigpID09ICJHRVQiOgogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQodXJsLCAqKmt3YXJncykKICAgICAgICAgICAgZWxpZiBtZXRob2QudXBwZXIoKSA9PSAiUE9TVCI6CiAgICAgICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QodXJsLCAqKmt3YXJncykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHByaW50KGYi5LiN5pSv5oyB55qE6K+35rGC57G75Z6LOiB7bWV0aG9kfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UKICAgICAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5SZXF1ZXN0RXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYi6K+35rGC5aSx6LSlOiB7ZX0iKQogICAgICAgICAgICBpZiBpIDwgcmV0cmllcyAtIDE6ICAjIOWmguaenOS4jeaYr+acgOWQjuS4gOasoeWwneivle+8jOWwseetieW+heS4gOauteaXtumXtOWGjemHjeivlQogICAgICAgICAgICAgICAgd2FpdCA9IHJhbmRvbS5yYW5kaW50KDEsIDUpICAjIOmaj+acuuetieW+heaXtumXtAogICAgICAgICAgICAgICAgcHJpbnQoZiLnrYnlvoUge3dhaXR9IOenkuWQjumHjeivlS4uLiIpCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKHdhaXQpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwcmludCgi5bCd6K+V6K+35rGC5aSx6LSl77yM5bey6L6+5Yiw5pyA5aSn5bCd6K+V5qyh5pWwIikKICAgICAgICAgICAgICAgIHJldHVybiBOb25lICAjIOaIluiAheS9oOWPr+S7pei/lOWbnuS4gOS4queJueWumueahOWAvOaIluWvueixoeadpeihqOekuuivt+axguWksei0pQoKCmRlZiB0cygpOgogICAgcmV0dXJuIHN0cihpbnQodGltZS50aW1lKCkpKSArICIwMDAiCgoKY2hlY2tEaWN0ID0gewogICAgIk16a3hOVEUzTXpRNE1RPT0iOiBbIummmeWnkOeIseaXheihjCIsICJnaF81NGE2NWRjNjAwMzkiXSwKICAgICJNemc1TWpNME1ERXdOdz09IjogWyLmiJHmnKzpnZ7lh6EiLCAiZ2hfNDZiMDc2OTAzNDczIl0sCiAgICAiTXpVek9EWTROekUyT1E9PSI6IFsi5aSa6IKJ6JGh6JCEMjAyMCIsICJnaF9iM2Q3OWNkMWUxYjUiXSwKICAgICJNemt5TWpFM016WXhNZz09IjogWyJZb3VoZnVsIiwgImdoX2IzZDc5Y2QxZTFiNSJdLAogICAgIk16a3hOak13TkRJek9BPT0iOiBbIuWwkeW5tOayoeacieS5jOaJmOmCpjMiLCAiZ2hfYjNkNzljZDFlMWI1Il0sCiAgICAiTXpnM056VXhNamM1TWc9PSI6IFsi5pif5pif6K+66KiAIiwgImdoX2IzZDc5Y2QxZTFiNSJdLAogICAgIk16ZzROVGN3T0RFMU5BPT0iOiBbIuaWkemprOi/mOayoeedoTEyMyIsICJnaF9iM2Q3OWNkMWUxYjUiXSwKICAgICJNemswT0RJeE9ERTRPUT09IjogWyLmjIHlrrblppnmi5vlrp3lhbgiLCAiZ2hfYjNkNzljZDFlMWI1Il0sCiAgICAiTXpnMk5qVXlNakkxTkE9PSI6IFsiTGlsaW5uZyIsICJnaF9iM2Q3OWNkMWUxYjUiXSwKICAgICJNekl6TURjek9EZzRNdz09IjogWyLmnInmlYXkuovnmoTlkIzlraZZIiwgImdoX2IzZDc5Y2QxZTFiNSJdLAogICAgIk16ZzVPRFV5TXpZek1RPT0iOiBbIjc4OeS5n+S4jeihjCIsICJnaF9iM2Q3OWNkMWUxYjUiXSwKICAgICJNelUwTnpJNU1qYzRPUT09IjogWyLnmq7om4vnmKbogonnjKoiLCAiZ2hfNThkN2VlNTkzYjg2Il0sCiAgICAiTXpnNU1EZ3hPREF6TWc9PSI6IFsi5YyX5YyX5bCP5Yqp5omLIiwgImdoXzU4ZDdlZTU5M2I4NiJdLAogICAgIk16SXpNRGN6T0RnNE13PT0iOiBbIuacieaVheS6i+eahOWQjOWtplkiLCAiZ2hfYjhiOTI5MzRkYTVmIl0sCiAgICAiTXpreE5EVTFOREV6Tnc9PSI6IFsi54yr54yr55yL55yL5pyN5YqhIiwgImdoX2U1MGNmZWZlZjllNSJdLAp9CgoKY2xhc3MgSEhZRDoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBjZyk6CiAgICAgICAgc2VsZi5Db29raWUgPSBjZ1siQ29va2llIl0KICAgICAgICBzZWxmLnR4YnogPSBjZ1sidHhieiJdCiAgICAgICAgc2VsZi50b3BpY0lkcyA9IGNnWyJ0b3BpY0lkcyJdCiAgICAgICAgc2VsZi5hcHBUb2tlbiA9IGNnWyJhcHBUb2tlbiJdCiAgICAgICAgZ2xvYmFsIHdlY2hhdEJ1c3NpbmVzc0tleQogICAgICAgIHNlbGYud2VjaGF0QnVzc2luZXNzS2V5ID0gd2VjaGF0QnVzc2luZXNzS2V5IG9yICIiCiAgICAgICAgc2VsZi5hbGlBY2NvdW50ID0gY2dbImFsaUFjY291bnQiXSBvciAiIgogICAgICAgIHNlbGYuYWxpTmFtZSA9IGNnWyJhbGlOYW1lIl0gb3IgIiIKICAgICAgICBzZWxmLm5hbWUgPSBjZ1sibmFtZSJdCiAgICAgICAgc2VsZi5kb21uYWluSG9zdCA9ICIxNjk4ODU1MTM5Lmh4aW9uZy50b3AiCiAgICAgICAgc2VsZi5yZXF1ZXN0X2lkID0gIiIKICAgICAgICBzZWxmLmhlYWRlcnMgPSB7CiAgICAgICAgICAgICJDb25uZWN0aW9uIjogImtlZXAtYWxpdmUiLAogICAgICAgICAgICAiQWNjZXB0IjogImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCwgKi8qOyBxPTAuMDEiLAogICAgICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA3LjAuMC4wIFNhZmFyaS81MzcuMzYgTmV0VHlwZS9XSUZJIE1pY3JvTWVzc2VuZ2VyLzcuMC4yMC4xNzgxKDB4NjcwMDE0M0IpIFdpbmRvd3NXZWNoYXQoMHg2MzA5MDYyMSkgWFdFQi84MzUxIEZsdWUiLAogICAgICAgICAgICAiWC1SZXF1ZXN0ZWQtV2l0aCI6ICJYTUxIdHRwUmVxdWVzdCIsCiAgICAgICAgICAgICJSZWZlcmVyIjogZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9LyIsCiAgICAgICAgICAgICJPcmlnaW4iOiBmImh0dHA6Ly97c2VsZi5kb21uYWluSG9zdH0iLAogICAgICAgICAgICAjICJIb3N0IjogZiJ7c2VsZi5kb21uYWluSG9zdH0iLAogICAgICAgICAgICAiQWNjZXB0LUVuY29kaW5nIjogImd6aXAsIGRlZmxhdGUiLAogICAgICAgICAgICAiQWNjZXB0LUxhbmd1YWdlIjogInpoLUNOLHpoIiwKICAgICAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLTgiLAogICAgICAgICAgICAiQ29va2llIjogc2VsZi5Db29raWUsCiAgICAgICAgfQogICAgICAgIHNlbGYubGFzdGJpeiA9ICIiCiAgICAgICAgc2VsZi5yZWFkSnVtcFBhdGggPSAiIgogICAgICAgIHNlbGYucmV0cnlSZWFkaW5nID0gRmFsc2UKICAgICAgICBzZWxmLnJlbWFpbl9nb2xkID0gMAogICAgICAgIHNlbGYucmVtYWluID0gMAoKICAgIGRlZiB1c2VyX2luZm8oc2VsZik6CiAgICAgICAgdSA9IGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fS9oYW9iYW9iYW8vdXNlciIKICAgICAgICByID0gIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHIgPSBzYWZlX3JlcXVlc3QoIkdFVCIsIHUsIGhlYWRlcnM9c2VsZi5oZWFkZXJzKQogICAgICAgICAgICByaiA9IHIuanNvbigpCiAgICAgICAgICAgIGlmIHJqLmdldCgiZXJyY29kZSIpID09IDA6CiAgICAgICAgICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV3ojrflj5bkv6Hmga/miJDlip/vvIznlKjmiLdJROS4uiB7ci5qc29uKClbJ2RhdGEnXVsndXNlcmlkJ119IikKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV3ojrflj5bnlKjmiLfkv6Hmga/lpLHotKXvvIzotKblj7flvILluLgg5oiW6ICFIENvb2tpZeaXoOaViO+8jOivt+ajgOa1i0Nvb2tpZeaYr+WQpuato+ehriIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHByaW50KHIudGV4dCkKICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d6I635Y+W55So5oi35L+h5oGv5aSx6LSlLENvb2tpZeaXoOaViO+8jOivt+ajgOa1i0Nvb2tpZeaYr+WQpuato+ehriIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBnb2xkKHNlbGYpOgogICAgICAgIHIgPSAiIgogICAgICAgIHRyeToKICAgICAgICAgICAgdSA9IGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fS9oYW9iYW9iYW8vd29ya2luZm8iCiAgICAgICAgICAgIHIgPSBzYWZlX3JlcXVlc3QoIkdFVCIsIHUsIGhlYWRlcnM9c2VsZi5oZWFkZXJzKQogICAgICAgICAgICAjIHByaW50KHIuanNvbigpKQogICAgICAgICAgICByaiA9IHIuanNvbigpCiAgICAgICAgICAgIHNlbGYucmVtYWluX2dvbGQgPSBtYXRoLmZsb29yKGludChyai5nZXQoImRhdGEiKS5nZXQoInJlbWFpbl9nb2xkIikpKQogICAgICAgICAgICBzZWxmLnJlbWFpbiA9IGZsb2F0KHJqLmdldCgiZGF0YSIpLmdldCgicmVtYWluIikpCiAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgZifku4rml6Xlt7Lnu4/pmIXor7vkuoZ7cmouZ2V0KCJkYXRhIikuZ2V0KCJkYXlyZWFkcyIpfeevh+aWh+eroCDlvZPliY3ph5HluIF7cmouZ2V0KCJkYXRhIikuZ2V0KCJyZW1haW5fZ29sZCIpfSDlvZPliY3kvZnpop17c2VsZi5yZW1haW59JwogICAgICAgICAgICApCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV3ojrflj5bph5HluIHlpLHotKUiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBkZWYgZ2V0S2V5KHNlbGYpOgogICAgICAgIHVrID0gIiIKICAgICAgICB1a1JlcyA9IE5vbmUKICAgICAgICBmb3IgaSBpbiByYW5nZSgxMCk6CiAgICAgICAgICAgIHUgPSBmImh0dHA6Ly97c2VsZi5kb21uYWluSG9zdH17c2VsZi5yZWFkSnVtcFBhdGh9IgogICAgICAgICAgICAjIHByaW50KCLmj5DnpLogZ2V0S2V577yaIiwgdSkKICAgICAgICAgICAgcCA9IGYiIgogICAgICAgICAgICByID0gc2FmZV9yZXF1ZXN0KCJQT1NUIiwgdSwgaGVhZGVycz1zZWxmLmhlYWRlcnMsIGRhdGE9cCwgdmVyaWZ5PUZhbHNlKQogICAgICAgICAgICAjIHByaW50KCJnZXRLZXnvvJoiLCByLnRleHQpCiAgICAgICAgICAgIHJqID0gci5qc29uKCkKICAgICAgICAgICAgZG9tYWluID0gcmouZ2V0KCJkYXRhIikuZ2V0KCJkb21haW4iKQogICAgICAgICAgICAjIHByaW50KCLor7fmsYLkuK3ovazpobXvvJoiLCByLnRleHQpCiAgICAgICAgICAgIHBwID0gcGFyc2VfcXModXJscGFyc2UoZG9tYWluKS5xdWVyeSkKICAgICAgICAgICAgaG4gPSB1cmxwYXJzZShkb21haW4pLm5ldGxvYwogICAgICAgICAgICB1ayA9IHBwLmdldCgidWsiKVswXQogICAgICAgICAgICB1a1JlcyA9IHIudGV4dAogICAgICAgICAgICBpZiB1azoKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgaWYgdWsgPT0gIiI6CiAgICAgICAgICAgIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeiOt+WPlnVr5aSx6LSl77yM6L+U5Zue6ZSZ6K+v77yae3VrUmVzfSIpCiAgICAgICAgICAgIHJldHVybgogICAgICAgIHRpbWUuc2xlZXAoOCkKICAgICAgICByID0gc2FmZV9yZXF1ZXN0KAogICAgICAgICAgICAiR0VUIiwKICAgICAgICAgICAgZG9tYWluLAogICAgICAgICAgICBoZWFkZXJzPXsKICAgICAgICAgICAgICAgICJBY2NlcHQiOiAidGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45IiwKICAgICAgICAgICAgICAgICJBY2NlcHQtRW5jb2RpbmciOiAiZ3ppcCwgZGVmbGF0ZSwgYnIiLAogICAgICAgICAgICAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aDtxPTAuOSIsCiAgICAgICAgICAgICAgICAiQ29ubmVjdGlvbiI6ICJrZWVwLWFsaXZlIiwKICAgICAgICAgICAgICAgICJIb3N0IjogZiJ7aG59IiwKICAgICAgICAgICAgICAgICJTZWMtRmV0Y2gtRGVzdCI6ICJkb2N1bWVudCIsCiAgICAgICAgICAgICAgICAiU2VjLUZldGNoLU1vZGUiOiAibmF2aWdhdGUiLAogICAgICAgICAgICAgICAgIlNlYy1GZXRjaC1TaXRlIjogIm5vbmUiLAogICAgICAgICAgICAgICAgIlNlYy1GZXRjaC1Vc2VyIjogIj8xIiwKICAgICAgICAgICAgICAgICJVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzIjogIjEiLAogICAgICAgICAgICAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEwNy4wLjAuMCBTYWZhcmkvNTM3LjM2IE5ldFR5cGUvV0lGSSBNaWNyb01lc3Nlbmdlci83LjAuMjAuMTc4MSgweDY3MDAxNDNCKSBXaW5kb3dzV2VjaGF0KDB4NjMwOTA3MWQpIFhXRUIvODQ2MSBGbHVlIiwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdmVyaWZ5PUZhbHNlLAogICAgICAgICkKICAgICAgICAjIDxzY3JpcHQgc3JjPSJodHRwczovL2ltYWdlLmh6eXNteXkuY24veXVuc2FvbWEvbmV3cHJvamVjdC9qcy9hcnRpY2xlLmpzP3Y0LjAiPjwvc2NyaXB0PgogICAgICAgIHJlYWRKc1ZlcnNpb24gPSBleHRyYWN0X21pZGRsZV90ZXh0KHIudGV4dCwgImpzL2FydGljbGUuanM/IiwgJyInKQogICAgICAgIGNoZWNrSnNDb2RlQ2hhbmdlZCA9ICgKICAgICAgICAgICAgY2hlY2tfZmlsZV9tZDUoCiAgICAgICAgICAgICAgICBleHRyYWN0X21pZGRsZV90ZXh0KHIudGV4dCwgJzxzY3JpcHQgc3JjPSInLCAnIj48L3NjcmlwJyksCiAgICAgICAgICAgICAgICAiM2UyOTMxOGIzYWQ2ZGUxNDgxZWMwM2U1N2ZhMGUyN2MiLAogICAgICAgICAgICApCiAgICAgICAgICAgID09IEZhbHNlCiAgICAgICAgKQogICAgICAgIGlmIChyZWFkSnNWZXJzaW9uICE9ICJ2MTAuMCIpIG9yIGNoZWNrSnNDb2RlQ2hhbmdlZDoKICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICBmIui0puWPt1t7c2VsZi5uYW1lfV0g5qOA5rWL5Yiw5o6l5Y+j54mI5pys5Y+R55Sf5Y+Y5YyW77yM5b2T5YmN5o6l5Y+j54mI5pys5Li677yae3JlYWRKc1ZlcnNpb25977yM5ouJ5ZON6K2m5oql77yM5Y+w5a2Q5pCe5LqL77yM6KaB5oqT5Lq65LqG77yM5byA5aeL5pKk6YCA77yM6YCA5Ye656iL5bqPID4+ICIKICAgICAgICAgICAgKQogICAgICAgICAgICBzeXMuZXhpdCgwKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgICMgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+WHhuWkh+WujOaIkO+8mnt1a33vvIzmj5Dlj5bliLDnmoTlnLDlnYDvvJp7ZG9tYWlufSIpCiAgICAgICAgICAgIGlmIG15a2t5ZFJlYWRQdXJlTG9nID09IEZhbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgZiLotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+WHhuWkh+aIkOWKn++8jOW9k+WJjeaOpeWPo+eJiOacrOS4uu+8mntyZWFkSnNWZXJzaW9ufSDljbPlsIblvIDlp4vpmIXor7sg4pyFIO+8jOmYheivu+WPguaVsOS4uu+8mnt1a30iCiAgICAgICAgICAgICAgICApCiAgICAgICAgaCA9IHsKICAgICAgICAgICAgIkFjY2VwdCI6ICJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHQsICovKjsgcT0wLjAxIiwKICAgICAgICAgICAgIkFjY2VwdC1FbmNvZGluZyI6ICJnemlwLCBkZWZsYXRlLCBiciIsCiAgICAgICAgICAgICJBY2NlcHQtTGFuZ3VhZ2UiOiAiemgtQ04semg7cT0wLjkiLAogICAgICAgICAgICAiQ29ubmVjdGlvbiI6ICJrZWVwLWFsaXZlIiwKICAgICAgICAgICAgIkhvc3QiOiBobiwKICAgICAgICAgICAgIk9yaWdpbiI6IGYiaHR0cHM6Ly97aG59IiwKICAgICAgICAgICAgIlNlYy1GZXRjaC1EZXN0IjogImVtcHR5IiwKICAgICAgICAgICAgIlNlYy1GZXRjaC1Nb2RlIjogImNvcnMiLAogICAgICAgICAgICAiU2VjLUZldGNoLVNpdGUiOiAiY3Jvc3Mtc2l0ZSIsCiAgICAgICAgICAgICJVc2VyLUFnZW50IjogIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMDcuMC4wLjAgU2FmYXJpLzUzNy4zNiBOZXRUeXBlL1dJRkkgTWljcm9NZXNzZW5nZXIvNy4wLjIwLjE3ODEoMHg2NzAwMTQzQikgV2luZG93c1dlY2hhdCgweDYzMDkwNzFkKSBYV0VCLzg0NjEgRmx1ZSIsCiAgICAgICAgfQogICAgICAgIHJldHVybiB1aywgaAoKICAgIGRlZiByZWFkKHNlbGYpOgogICAgICAgIGluZm8gPSBzZWxmLmdldEtleSgpCiAgICAgICAgaWYgbGVuKGluZm8pID09IDA6CiAgICAgICAgICAgIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeiOt+WPlumYheivu+WPguaVsOWksei0pe+8jOWBnOatouW+gOWQjumYheivu++8geKaoO+4jyAiKQogICAgICAgICAgICByZXR1cm4KICAgICAgICAjIHByaW50KGluZm8pCiAgICAgICAgdGltZS5zbGVlcCgyKQogICAgICAgIGFyY3RpbGVUaW1lID0gMQogICAgICAgIHNlbGYucmV0cnlSZWFkaW5nID0gRmFsc2UKICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICByZXMgPSB7ImVycmNvZGUiOiAtMX0KICAgICAgICAgICAgIyByYXdSZXMgPSAiIgogICAgICAgICAgICByZWZyZXNoVGltZSA9IDAKICAgICAgICAgICAgd2hpbGUgcmVzWyJlcnJjb2RlIl0gIT0gMDoKICAgICAgICAgICAgICAgIHNlbGYucmV0cnlSZWFkaW5nID0gRmFsc2UKICAgICAgICAgICAgICAgIHRpbWVTdGFtcCA9IHN0cih0cygpKQogICAgICAgICAgICAgICAgbXlzaWduID0gaGFzaGxpYi5tZDUoCiAgICAgICAgICAgICAgICAgICAgKGluZm9bMV1bIkhvc3QiXSArIHRpbWVTdGFtcCArICJMaio/UTMjcE92aVciKS5lbmNvZGUoKQogICAgICAgICAgICAgICAgKS5oZXhkaWdlc3QoKQogICAgICAgICAgICAgICAgc2VsZi5wYXJhbXMgPSB7CiAgICAgICAgICAgICAgICAgICAgInVrIjogaW5mb1swXSwKICAgICAgICAgICAgICAgICAgICAidGltZSI6IHRpbWVTdGFtcCwKICAgICAgICAgICAgICAgICAgICAibXlzaWduIjogbXlzaWduLAogICAgICAgICAgICAgICAgICAgICJ2IjogIjYuMCIsCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB1ID0gZiJodHRwczovL25zci56c2YyMDIzZTQ1OC5jbG91ZC9oYW9iYW9iYW8vbWt3ZW56aGFuZ3MiCiAgICAgICAgICAgICAgICAjIHByaW50KAogICAgICAgICAgICAgICAgIyAgICAgIumYheivu+aWh+eroOWPguaVsOafpeeci++8miIsCiAgICAgICAgICAgICAgICAjICAgICB1LAogICAgICAgICAgICAgICAgIyAgICAgc2VsZi5wYXJhbXMsCiAgICAgICAgICAgICAgICAjICAgICBpbmZvLAogICAgICAgICAgICAgICAgIyAgICAgaW5mb1sxXVsiT3JpZ2luIl0ucmVwbGFjZSgiaHR0cHM6Ly8iLCAiIikucmVwbGFjZSgiLyIsICIiKSwKICAgICAgICAgICAgICAgICMgKQogICAgICAgICAgICAgICAgciA9IHNhZmVfcmVxdWVzdCgKICAgICAgICAgICAgICAgICAgICAiR0VUIiwKICAgICAgICAgICAgICAgICAgICB1LAogICAgICAgICAgICAgICAgICAgIGhlYWRlcnM9aW5mb1sxXSwKICAgICAgICAgICAgICAgICAgICBwYXJhbXM9c2VsZi5wYXJhbXMsCiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5PUZhbHNlLAogICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ9NjAsCiAgICAgICAgICAgICAgICAgICAgcHJveGllcz1wcm94aWVzLAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgcHJpbnQoIi0iICogNTApCiAgICAgICAgICAgICAgICAjIGlmIG15a2t5ZFJlYWRQdXJlTG9nID09IEZhbHNlOgogICAgICAgICAgICAgICAgIyAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAjICAgIGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeesrFt7cmVmcmVzaFRpbWUrMX1d5qyh6I635Y+W6ZiF6K+75paH56ugW3tpbmZvWzBdfV3nm67nmoTpobXvvJp7ci50ZXh0fSIKICAgICAgICAgICAgICAgICMgKQogICAgICAgICAgICAgICAgIyByYXdSZXMgPSByLnRleHQKICAgICAgICAgICAgICAgICMgcHJpbnQoIuiOt+WPluaWh+eroOmYheivu+mTvuaOpe+8miIsIHUsIGluZm9bMV0sIHIudGV4dCkKICAgICAgICAgICAgICAgIGlmIHIudGV4dCBhbmQgci5qc29uKClbImVycmNvZGUiXSA9PSAwOgogICAgICAgICAgICAgICAgICAgIHJlcyA9IHIuanNvbigpCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeesrFt7cmVmcmVzaFRpbWUrMX1d5qyh6I635Y+W56ysW3thcmN0aWxlVGltZX1d56+H6ZiF6K+75paH56ugW3tpbmZvWzBdfV3ot7Povazpk77mjqXmiJDlip8iCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBkZWNvZGVkX3N0ciA9IGpzb24ubG9hZHMoci50ZXh0KQogICAgICAgICAgICAgICAgICAgIGlmIGRlY29kZWRfc3RyWyJtc2ciXToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIui0puWPt1t7c2VsZi5uYW1lfV3nrKxbe3JlZnJlc2hUaW1lKzF9XeasoeiOt+WPluesrFt7YXJjdGlsZVRpbWV9Xeevh+mYheivu+aWh+eroFt7aW5mb1swXX1d6Lez6L2s6ZO+5o6l5aSx6LSl77yae2RlY29kZWRfc3RyWydtc2cnXX0iCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIui0puWPt1t7c2VsZi5uYW1lfV3nrKxbe3JlZnJlc2hUaW1lKzF9XeasoeiOt+WPluesrFt7YXJjdGlsZVRpbWV9Xeevh+mYheivu+aWh+eroFt7aW5mb1swXX1d6Lez6L2s6ZO+5o6l5aSx6LSl77yae3IudGV4dH0iCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMS41KQogICAgICAgICAgICAgICAgcmVmcmVzaFRpbWUgPSByZWZyZXNoVGltZSArIDEKICAgICAgICAgICAgICAgIGlmIHJlZnJlc2hUaW1lID49IDU6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLimqDvuI8g6LSm5Y+3W3tzZWxmLm5hbWV9XeiOt+WPlumYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1d6LaF5pe24oCm4oCmIikKICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgd2VjaGF0UG9zdExpbmsgPSAiIgogICAgICAgICAgICBpZiByZXMuZ2V0KCJlcnJjb2RlIikgPT0gMDoKICAgICAgICAgICAgICAgIHJldHVybkxpbmsgPSAiIgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIHJldHVybkxpbmsgPSByZXMuZ2V0KCJkYXRhIikuZ2V0KCJsaW5rIikKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICBlcnJvck1zZyA9IHJlcy5nZXQoImRhdGEiKQogICAgICAgICAgICAgICAgICAgICMgcHJpbnQoIjHmiqXplJnvvJoiLCBlKQogICAgICAgICAgICAgICAgICAgICMgcHJpbnQoIjHov5Tlm57vvJoiLCByYXdSZXMpCiAgICAgICAgICAgICAgICAgICAgaWYgIjQwNCBOb3QgRm91bmQiIGluIGVycm9yTXNnOgogICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1zZyA9ICLlj7DlrZDmjqXlj6PkuI3ooYzvvIzltKnkuoZ+IgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJldHJ5UmVhZGluZyA9IFRydWUKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIuKaoO+4jyDotKblj7dbe3NlbGYubmFtZX1d6I635Y+W6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5paH56ugW3tpbmZvWzBdfV3pk77mjqXlpLHotKXvvIznlpHkvLzlj7DlrZDmjqXlj6PlpKrlnoPlnL7vvIzltKnkuobvvIzov5Tlm57mlbDmja7kuLrvvJoiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNc2csCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgZiLimqDvuI8g6LSm5Y+3W3tzZWxmLm5hbWV9XeiOt+WPlumYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1d6ZO+5o6l5aSx6LSl77yM55aR5Ly85Y+w5a2Q5o6l5Y+j5aSq5Z6D5Zy+77yM5bSp5LqG77yM6L+U5Zue5pWw5o2u5Li677yaIiwKICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNc2csCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICBpZiAibXAud2VpeGluLnFxLmNvbSIgaW4gcmV0dXJuTGluazoKICAgICAgICAgICAgICAgICAgICBpZiBteWtreWRSZWFkUHVyZUxvZyA9PSBGYWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+W+ruS/oeaWh+eroO+8mntyZXR1cm5MaW5rfSIpCiAgICAgICAgICAgICAgICAgICAgd2VjaGF0UG9zdExpbmsgPSByZXR1cm5MaW5rCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICMgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroOWHhuWkh+i3s+i9rO+8mntsaW5rfSIpCiAgICAgICAgICAgICAgICAgICAgd2VjaGF0UG9zdExpbmsgPSBzZWxmLmp1bXAocmV0dXJuTGluaykKICAgICAgICAgICAgICAgICAgICBpZiBteWtreWRSZWFkUHVyZUxvZyA9PSBGYWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIui0puWPt1t7c2VsZi5uYW1lfV0g6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5b6u5L+h5paH56ug77yae3dlY2hhdFBvc3RMaW5rfSIKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgaWYgbXlra3lkUmVhZFB1cmVMb2cgPT0gRmFsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroO+8mnt3ZWNoYXRQb3N0TGlua30iKQogICAgICAgICAgICAgICAgcG9zdEluZm8gPSBnZXRpbmZvKHdlY2hhdFBvc3RMaW5rKQogICAgICAgICAgICAgICAgaWYgcG9zdEluZm8gPT0gRmFsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGYi4pqg77iPIOi0puWPt1t7c2VsZi5uYW1lfV3lm6Ag6I635Y+W5YWs5LyX5Y+35paH56ug5L+h5oGv5LiN5oiQ5Yqf77yM5a+86Ie06ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5paH56ugW3tpbmZvWzBdfV0g5aSx6LSl4oCm4oCmIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIHNsZWVwVGltZSA9IHJhbmRvbS5yYW5kaW50KDcsIDEwKQogICAgICAgICAgICAgICAgIyDlpoLmnpzmmK/mo4DmtYvnibnlvoHliLDnmoTmlofnq6Ag5oiW6ICFIOWQjuS4gOevh+aWh+eroOS4juWJjeS4gOevh+ebuOS8vAogICAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgICAgIGNoZWNrRGljdC5nZXQocG9zdEluZm9bNF0pICE9IE5vbmUKICAgICAgICAgICAgICAgICAgICBvciAocmVzLmdldCgiZGF0YSIpLmdldCgiYSIpID09IDIpCiAgICAgICAgICAgICAgICAgICAgb3IgKCImY2hrc209IiBpbiB3ZWNoYXRQb3N0TGluaykKICAgICAgICAgICAgICAgICk6CiAgICAgICAgICAgICAgICAgICAgc2xlZXBUaW1lID0gcmVhZFBvc3REZWxheSBvciByYW5kb20ucmFuZGludCgxNSwgMjApCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGYi4pqg77iPIOi0puWPt1t7c2VsZi5uYW1lfV3pmIXor7vnrKxbe2FyY3RpbGVUaW1lfV3nr4fmlofnq6Bbe2luZm9bMF19XSDmo4DmtYvliLDnlpHkvLzmo4DmtYvmlofnq6DvvIzmraPlnKjmjqjpgIHvvIznrYnlvoXov4fmo4DmtYvvvIznrYnlvoXml7bpl7TvvJp7c2xlZXBUaW1lfeenkuOAguOAguOAgiIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgaWYgc2VsZi53ZWNoYXRCdXNzaW5lc3NLZXk6CiAgICAgICAgICAgICAgICAgICAgICAgIHB1c2hXZWNoYXRCdXNzaW5lc3Moc2VsZi53ZWNoYXRCdXNzaW5lc3NLZXksIHdlY2hhdFBvc3RMaW5rKQogICAgICAgICAgICAgICAgICAgIGVsaWYgc2VsZi5hcHBUb2tlbjoKICAgICAgICAgICAgICAgICAgICAgICAgcHVzaCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYXBwVG9rZW4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnRvcGljSWRzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIueMq+eMq+eci+eci+mYheivu+i/h+ajgOa1iyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWNoYXRQb3N0TGluaywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYi6LSm5Y+3W3tzZWxmLm5hbWV9XemYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1dIOato+WcqOetieW+hei/h+ajgOa1i++8jOetieW+heaXtumXtO+8mntzbGVlcFRpbWV956eSXG7lubvnlJ/mj5DnpLrvvJrlv6vngrnvvIzliKvogL3mkIHml7bpl7TkuobvvIEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIm15a2t5ZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYi4pqg77iPIOi0puWPt1t7c2VsZi5uYW1lfV3pmIXor7vnrKxbe2FyY3RpbGVUaW1lfV3nr4fmlofnq6Bbe2luZm9bMF19XSDpnIDopoHov4fmo4DmtYvvvIzkvYbmmK/mnKrphY3nva7mjqjpgIF0b2tlbu+8jOS4uuS6humBv+WFjem7keWPt++8jOWBnOatoumYheivu+OAguOAguOAgiIKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGYi4pyFIOi0puWPt1t7c2VsZi5uYW1lfV3pmIXor7vnrKxbe2FyY3RpbGVUaW1lfV3nr4fmlofnq6Bbe2luZm9bMF19XSDpnZ7mo4DmtYvmlofnq6DvvIzmqKHmi5/or7t7c2xlZXBUaW1lfeenkiIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBzZWxmLmxhc3RiaXogPSBwb3N0SW5mb1s0XQogICAgICAgICAgICAgICAgdGltZS5zbGVlcChzbGVlcFRpbWUpCiAgICAgICAgICAgICAgICB1MSA9IGYiaHR0cHM6Ly9uc3IuenNmMjAyM2U0NTguY2xvdWQvaGFvYmFvYmFvL2FkZGdvbGRzMj90aW1lPXtzbGVlcFRpbWV9JnVrPXtpbmZvWzBdfSZwc2lnbj17bXlzaWdufSIKICAgICAgICAgICAgICAgIHIxID0gc2FmZV9yZXF1ZXN0KCJHRVQiLCB1MSwgaGVhZGVycz1pbmZvWzFdLCB2ZXJpZnk9RmFsc2UpCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgIyBwcmludCgi5aKe5Yqg6YeR5biB77yaIiwgdTEsIGluZm9bMV0sIHIxLnRleHQpCiAgICAgICAgICAgICAgICAgICAgaWYgcjEudGV4dCBhbmQgcjEuanNvbigpOgogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIuKchSDotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1d5omA5b6X6YeR5biB77yae3IxLmpzb24oKVsnZGF0YSddWydnb2xkJ1195Liq77yM6LSm5oi35b2T5YmN6YeR5biB77yae3IxLmpzb24oKVsnZGF0YSddWydsYXN0X2dvbGQnXX3kuKrvvIzku4rml6Xlt7Lor7vvvJp7cjEuanNvbigpWydkYXRhJ11bJ2RheV9yZWFkJ1195qyh77yM5LuK5pel5pyq6K+7IHtyMS5qc29uKClbJ2RhdGEnXVsncmVtYWluX3JlYWQnXX3nr4fmlofnq6AiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYi4p2MIOi0puWPt1t7c2VsZi5uYW1lfV0g6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5paH56ugW3tpbmZvWzBdfV3lvILluLjvvJp7cjEuanNvbigpLmdldCgnbXNnJyl9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgIuacrOasoemYheivu+aXoOaViCIgaW4gcjEuanNvbigpLmdldCgibXNnIik6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYi4p2MIOi0puWPt1t7c2VsZi5uYW1lfV0g6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5paH56ugW3tpbmZvWzBdfV3lpLHotKXvvJp7cjEudGV4dH0iCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICAjIHByaW50KCIy5oql6ZSZ77yaIiwgZSkKICAgICAgICAgICAgICAgICAgICAjIHByaW50KCIy6L+U5Zue77yaIiwgcjEudGV4dCkKICAgICAgICAgICAgICAgICAgICBlcnJvck1zZyA9IHIxLnRleHQKICAgICAgICAgICAgICAgICAgICBpZiAiNDA0IE5vdCBGb3VuZCIgaW4gZXJyb3JNc2c6CiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTXNnID0gIuWPsOWtkOaOpeWPo+S4jeihjO+8jOW0qeS6hn4iCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmV0cnlSZWFkaW5nID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYi4pqg77iPIOi0puWPt1t7c2VsZi5uYW1lfV0g6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5paH56ugW3tpbmZvWzBdfV3lvILluLjvvIzov5Tlm57mlbDmja7kuLrvvJoiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNc2csCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgZiLimqDvuI8g6LSm5Y+3W3tzZWxmLm5hbWV9XSDpmIXor7vnrKxbe2FyY3RpbGVUaW1lfV3nr4fmlofnq6Bbe2luZm9bMF19XeW8guW4uO+8jOi/lOWbnuaVsOaNruS4uu+8miIsCiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTXNnLAogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBlbGlmIHJlcy5nZXQoImVycmNvZGUiKSA9PSA0MDU6CiAgICAgICAgICAgICAgICBwcmludChmIuKaoO+4jyDotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1d6ZiF6K+76YeN5aSNIikKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMS41KQogICAgICAgICAgICBlbGlmIHJlcy5nZXQoImVycmNvZGUiKSA9PSA0MDc6CiAgICAgICAgICAgICAgICBwcmludChmIuKaoO+4jyDotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1d6ZiF6K+757uT5p2fIikKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwcmludChmIuKaoO+4jyDotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1d5pyq55+l5oOF5Ya1IikKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMS41KQogICAgICAgICAgICBhcmN0aWxlVGltZSA9IGFyY3RpbGVUaW1lICsgMQoKICAgIGRlZiBqdW1wKHNlbGYsIGxpbmspOgogICAgICAgIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeW8gOWni+acrOasoemYheivu+KApuKApiIpCiAgICAgICAgaG4gPSB1cmxwYXJzZShsaW5rKS5uZXRsb2MKICAgICAgICBoID0gewogICAgICAgICAgICAiSG9zdCI6IGhuLAogICAgICAgICAgICAiQ29ubmVjdGlvbiI6ICJrZWVwLWFsaXZlIiwKICAgICAgICAgICAgIlVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHMiOiAiMSIsCiAgICAgICAgICAgICJVc2VyLUFnZW50IjogIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMDcuMC4wLjAgU2FmYXJpLzUzNy4zNiBOZXRUeXBlL1dJRkkgTWljcm9NZXNzZW5nZXIvNy4wLjIwLjE3ODEoMHg2NzAwMTQzQikgV2luZG93c1dlY2hhdCgweDYzMDkwNjIxKSBYV0VCLzgzNTEgRmx1ZSIsCiAgICAgICAgICAgICJBY2NlcHQiOiAidGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45IiwKICAgICAgICAgICAgIkFjY2VwdC1FbmNvZGluZyI6ICJnemlwLCBkZWZsYXRlIiwKICAgICAgICAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aCIsCiAgICAgICAgICAgICJDb29raWUiOiBzZWxmLkNvb2tpZSwKICAgICAgICB9CiAgICAgICAgciA9IHNhZmVfcmVxdWVzdCgiR0VUIiwgbGluaywgaGVhZGVycz1oLCBhbGxvd19yZWRpcmVjdHM9RmFsc2UsIHZlcmlmeT1GYWxzZSkKICAgICAgICAjIHByaW50KHIuc3RhdHVzX2NvZGUpCiAgICAgICAgTG9jYXRpb24gPSByLmhlYWRlcnMuZ2V0KCJMb2NhdGlvbiIpCiAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d5byA5aeL6ZiF6K+75paH56ugIC0ge0xvY2F0aW9ufSIpCiAgICAgICAgcmV0dXJuIExvY2F0aW9uCgogICAgZGVmIHdpdGhkcmF3UG9zdChzZWxmKToKICAgICAgICB1ID0gZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9L2hhb2Jhb2Jhby9nZXR3aXRoZHJhdyIKICAgICAgICBwID0gZiJzaWduaWQ9e3NlbGYucmVxdWVzdF9pZH0mdWE9MCZwdHlwZT0wJnBhY2NvdW50PSZwbmFtZT0iCiAgICAgICAgaWYgc2VsZi5hbGlBY2NvdW50IGFuZCBzZWxmLmFsaU5hbWU6CiAgICAgICAgICAgIHAgPSBmInNpZ25pZD17c2VsZi5yZXF1ZXN0X2lkfSZ1YT0yJnB0eXBlPTEmcGFjY291bnQ9e3F1b3RlKHNlbGYuYWxpQWNjb3VudCl9JnBuYW1lPXtxdW90ZShzZWxmLmFsaU5hbWUpfSIKICAgICAgICByID0gc2FmZV9yZXF1ZXN0KAogICAgICAgICAgICAiUE9TVCIsCiAgICAgICAgICAgIHUsCiAgICAgICAgICAgIGhlYWRlcnM9ewogICAgICAgICAgICAgICAgIkFjY2VwdCI6ICJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHQsICovKjsgcT0wLjAxIiwKICAgICAgICAgICAgICAgICJBY2NlcHQtRW5jb2RpbmciOiAiZ3ppcCwgZGVmbGF0ZSIsCiAgICAgICAgICAgICAgICAiQWNjZXB0LUxhbmd1YWdlIjogInpoLUNOLHpoO3E9MC45IiwKICAgICAgICAgICAgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04IiwKICAgICAgICAgICAgICAgICJDb29raWUiOiBzZWxmLkNvb2tpZSwKICAgICAgICAgICAgICAgICJIb3N0IjogZiJ7c2VsZi5kb21uYWluSG9zdH0iLAogICAgICAgICAgICAgICAgIk9yaWdpbiI6IGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fSIsCiAgICAgICAgICAgICAgICAiUHJveHktQ29ubmVjdGlvbiI6ICJrZWVwLWFsaXZlIiwKICAgICAgICAgICAgICAgICJSZWZlcmVyIjogZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9L2hhb2Jhb2Jhby93aXRoZHJhdyIsCiAgICAgICAgICAgICAgICAiWC1SZXF1ZXN0ZWQtV2l0aCI6ICJYTUxIdHRwUmVxdWVzdCIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRhdGE9cCwKICAgICAgICAgICAgdmVyaWZ5PUZhbHNlLAogICAgICAgICkKICAgICAgICBwcmludChmIuKchSDotKblj7dbe3NlbGYubmFtZX1dIOaPkOeOsOe7k+aenO+8miIsIHIuanNvbigpWyJtc2ciXSkKCiAgICBkZWYgd2l0aGRyYXcoc2VsZik6CiAgICAgICAgZ29sZCA9IGludChpbnQoc2VsZi5yZW1haW5fZ29sZCkgLyAxMDAwKSAqIDEwMDAKICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV0g5pys5qyh5o+Q546w6YeR6aKdICIsIHNlbGYucmVtYWluLCAi5YWDICIsIGdvbGQsICLph5HluIEiKQogICAgICAgIHdpdGhkcmF3QmFsYW5jZSA9IHJvdW5kKChpbnQoc2VsZi50eGJ6KSAvIDEwMDAwKSwgMykKICAgICAgICBpZiBnb2xkIG9yIChzZWxmLnJlbWFpbiA+PSB3aXRoZHJhd0JhbGFuY2UpOgogICAgICAgICAgICBpZiBnb2xkIGFuZCAoKGZsb2F0KHNlbGYucmVtYWluKSArIGdvbGQgLyAxMDAwMCkgPD0gMzApOgogICAgICAgICAgICAgICAgIyDlvIDlp4vmj5DnjrAKICAgICAgICAgICAgICAgICMg5Lul5LiL6YC76L6R5rKh55So77yM5LiN566h5L2gZ29sZOS4uuWkmuWwke+8jOWug+mDveaYr+WFqOmDqOWFkeaNogogICAgICAgICAgICAgICAgIyBtYXhDYW5FeGNoYW5nZUdvbGQgPSAoMjkuOSAtIHNlbGYucmVtYWluKSAqIDEwMDAwCiAgICAgICAgICAgICAgICAjIGlmIG1heENhbkV4Y2hhbmdlR29sZCA+IDA6CiAgICAgICAgICAgICAgICAjICAgICBnb2xkID0gbWluKG1heENhbkV4Y2hhbmdlR29sZCwgZ29sZCkKICAgICAgICAgICAgICAgICMgICAgIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XSDkuLrpgb/lhY3otoXov4fkuInljYHlnZfvvIzmnKzmrKHlhZHmjaLph5HluIHmlbDkuLogIiwgZ29sZCwgIumHkeW4gSIpCiAgICAgICAgICAgICAgICB1MSA9IGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fS9oYW9iYW9iYW8vZ2V0Z29sZCIKICAgICAgICAgICAgICAgIHAxID0gZiJyZXF1ZXN0X2lkPXtzZWxmLnJlcXVlc3RfaWR9JmdvbGQ9e2dvbGR9IgogICAgICAgICAgICAgICAgciA9IHNhZmVfcmVxdWVzdCgKICAgICAgICAgICAgICAgICAgICAiUE9TVCIsCiAgICAgICAgICAgICAgICAgICAgdTEsCiAgICAgICAgICAgICAgICAgICAgZGF0YT1wMSwKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzPXsKICAgICAgICAgICAgICAgICAgICAgICAgIkFjY2VwdCI6ICJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHQsICovKjsgcT0wLjAxIiwKICAgICAgICAgICAgICAgICAgICAgICAgIkFjY2VwdC1FbmNvZGluZyI6ICJnemlwLCBkZWZsYXRlIiwKICAgICAgICAgICAgICAgICAgICAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aDtxPTAuOSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04IiwKICAgICAgICAgICAgICAgICAgICAgICAgIkNvb2tpZSI6IHNlbGYuQ29va2llLAogICAgICAgICAgICAgICAgICAgICAgICAiSG9zdCI6IGYie3NlbGYuZG9tbmFpbkhvc3R9IiwKICAgICAgICAgICAgICAgICAgICAgICAgIk9yaWdpbiI6IGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJQcm94eS1Db25uZWN0aW9uIjogImtlZXAtYWxpdmUiLAogICAgICAgICAgICAgICAgICAgICAgICAiUmVmZXJlciI6IGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fS9oYW9iYW9iYW8vd2l0aGRyYXciLAogICAgICAgICAgICAgICAgICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA3LjAuMC4wIFNhZmFyaS81MzcuMzYgTmV0VHlwZS9XSUZJIE1pY3JvTWVzc2VuZ2VyLzcuMC4yMC4xNzgxKDB4NjcwMDE0M0IpIFdpbmRvd3NXZWNoYXQoMHg2MzA5MDcxZCkgWFdFQi84NDYxIEZsdWUiLAogICAgICAgICAgICAgICAgICAgICAgICAiWC1SZXF1ZXN0ZWQtV2l0aCI6ICJYTUxIdHRwUmVxdWVzdCIsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB2ZXJpZnk9RmFsc2UsCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgcmVzID0gci5qc29uKCkKICAgICAgICAgICAgICAgICAgICBpZiByZXMuZ2V0KCJlcnJjb2RlIikgPT0gMDoKICAgICAgICAgICAgICAgICAgICAgICAgd2l0aGRyYXdCYWxhbmNlTnVtID0gc2VsZi5yZW1haW4gKyBmbG9hdChyZXNbImRhdGEiXVsibW9uZXkiXSkKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIuKchSDotKblj7dbe3NlbGYubmFtZX1dIOmHkeW4geWFkeaNouS4uueOsOmHkeaIkOWKn++8jOW8gOWni+aPkOeOsO+8jOmihOiuoeWIsOi0piB7d2l0aGRyYXdCYWxhbmNlTnVtfSDlhYMgPj4+ICIKICAgICAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgd2l0aGRyYXdCYWxhbmNlTnVtIDwgd2l0aGRyYXdCYWxhbmNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d5rKh5pyJ6L6+5Yiw5o+Q546w5qCH5YeGIHt3aXRoZHJhd0JhbGFuY2V9IOWFgyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi53aXRoZHJhd1Bvc3QoKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYi6LSm5Y+3W3tzZWxmLm5hbWV9XSDph5HluIHlhZHmjaLkuLrnjrDph5HlpLHotKXvvJoiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgci50ZXh0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiDmj5DnjrDlnLDlnYDvvJoiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdTEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIOaPkOeOsOWPguaVsO+8miIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMSwKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgICMgcmFpc2UgZQogICAgICAgICAgICAgICAgICAgICMg5aSE55CG5byC5bi4CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1dIOaPkOeOsOWksei0pe+8miIsIGUpCiAgICAgICAgICAgIHNlbGYud2l0aGRyYXdQb3N0KCkKCiAgICBkZWYgaW5pdChzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHIgPSBzYWZlX3JlcXVlc3QoCiAgICAgICAgICAgICAgICAiR0VUIiwKICAgICAgICAgICAgICAgIGdldE5ld0ludml0ZVVybCgpLAogICAgICAgICAgICAgICAgaGVhZGVycz17CiAgICAgICAgICAgICAgICAgICAgIlVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHMiOiAiMSIsCiAgICAgICAgICAgICAgICAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEwNy4wLjAuMCBTYWZhcmkvNTM3LjM2IE5ldFR5cGUvV0lGSSBNaWNyb01lc3Nlbmdlci83LjAuMjAuMTc4MSgweDY3MDAxNDNCKSBXaW5kb3dzV2VjaGF0KDB4NjMwOTA3MWQpIFhXRUIvODQ2MSBGbHVlIiwKICAgICAgICAgICAgICAgICAgICAiQWNjZXB0IjogInRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOSIsCiAgICAgICAgICAgICAgICAgICAgIkFjY2VwdC1FbmNvZGluZyI6ICJnemlwLCBkZWZsYXRlIiwKICAgICAgICAgICAgICAgICAgICAiQWNjZXB0LUxhbmd1YWdlIjogInpoLUNOLHpoO3E9MC45IiwKICAgICAgICAgICAgICAgICAgICAiQ29va2llIjogc2VsZi5Db29raWUsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgdmVyaWZ5PUZhbHNlLAogICAgICAgICAgICAgICAgIyDnpoHmraLph43lrprlkJEKICAgICAgICAgICAgICAgIGFsbG93X3JlZGlyZWN0cz1GYWxzZSwKICAgICAgICAgICAgKQogICAgICAgICAgICBzZWxmLmRvbW5haW5Ib3N0ID0gci5oZWFkZXJzLmdldCgiTG9jYXRpb24iKS5zcGxpdCgiLyIpWzJdCiAgICAgICAgICAgICMgcHJpbnQoci50ZXh0KQogICAgICAgICAgICBpZiBteWtreWRSZWFkUHVyZUxvZyA9PSBGYWxzZToKICAgICAgICAgICAgICAgIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeaPkOWPluWIsOeahOWfn+WQje+8mntzZWxmLmRvbW5haW5Ib3N0fSIpCiAgICAgICAgICAgICMgc2VsZi5oZWFkZXJzID0gewogICAgICAgICAgICAjICAgICAiQ29ubmVjdGlvbiI6ICJrZWVwLWFsaXZlIiwKICAgICAgICAgICAgIyAgICAgIkFjY2VwdCI6ICJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHQsICovKjsgcT0wLjAxIiwKICAgICAgICAgICAgIyAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEwNy4wLjAuMCBTYWZhcmkvNTM3LjM2IE5ldFR5cGUvV0lGSSBNaWNyb01lc3Nlbmdlci83LjAuMjAuMTc4MSgweDY3MDAxNDNCKSBXaW5kb3dzV2VjaGF0KDB4NjMwOTA2MjEpIFhXRUIvODM1MSBGbHVlIiwKICAgICAgICAgICAgIyAgICAgIlgtUmVxdWVzdGVkLVdpdGgiOiAiWE1MSHR0cFJlcXVlc3QiLAogICAgICAgICAgICAjICAgICAiUmVmZXJlciI6IGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fS8iLAogICAgICAgICAgICAjICAgICAiT3JpZ2luIjogZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9IiwKICAgICAgICAgICAgIyAgICAgIyAiSG9zdCI6IGYie3NlbGYuZG9tbmFpbkhvc3R9IiwKICAgICAgICAgICAgIyAgICAgIkFjY2VwdC1FbmNvZGluZyI6ICJnemlwLCBkZWZsYXRlIiwKICAgICAgICAgICAgIyAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aCIsCiAgICAgICAgICAgICMgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04IiwKICAgICAgICAgICAgIyAgICAgIkNvb2tpZSI6IHNlbGYuQ29va2llLAogICAgICAgICAgICAjIH0KICAgICAgICAgICAgIyAjIOiOt+WPlnJlcXVlc3RJZAogICAgICAgICAgICBzZWxmLnJlYWRKdW1wUGF0aCA9ICIiCiAgICAgICAgICAgIGlmIG15a2t5ZERldGVjdGluZ1NlYWxTdGF0dXM6CiAgICAgICAgICAgICAgICByID0gc2FmZV9yZXF1ZXN0KAogICAgICAgICAgICAgICAgICAgICJHRVQiLAogICAgICAgICAgICAgICAgICAgIGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fS9oYW9iYW9iYW8vaG9tZSIsCiAgICAgICAgICAgICAgICAgICAgaGVhZGVycz17CiAgICAgICAgICAgICAgICAgICAgICAgICJVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzIjogIjEiLAogICAgICAgICAgICAgICAgICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA3LjAuMC4wIFNhZmFyaS81MzcuMzYgTmV0VHlwZS9XSUZJIE1pY3JvTWVzc2VuZ2VyLzcuMC4yMC4xNzgxKDB4NjcwMDE0M0IpIFdpbmRvd3NXZWNoYXQoMHg2MzA5MDcxZCkgWFdFQi84NDYxIEZsdWUiLAogICAgICAgICAgICAgICAgICAgICAgICAiQWNjZXB0IjogInRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJBY2NlcHQtRW5jb2RpbmciOiAiZ3ppcCwgZGVmbGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJBY2NlcHQtTGFuZ3VhZ2UiOiAiemgtQ04semg7cT0wLjkiLAogICAgICAgICAgICAgICAgICAgICAgICAiQ29va2llIjogc2VsZi5Db29raWUsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB2ZXJpZnk9RmFsc2UsCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBodG1sdGV4dCA9IHIudGV4dAogICAgICAgICAgICAgICAgcmVhZF9qdW1wX3JlYWRfdGV4dCA9IGV4dHJhY3RfbWlkZGxlX3RleHQoCiAgICAgICAgICAgICAgICAgICAgaHRtbHRleHQsICJmdW5jdGlvbiByZWFkX2p1bXBfcmVhZCgpeyIsICJzdWNjZXNzOiBmdW5jdGlvbiIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIGlmIHJlYWRfanVtcF9yZWFkX3RleHQ6CiAgICAgICAgICAgICAgICAgICAgcmVhZEp1bXBQYXRoID0gZXh0cmFjdF9taWRkbGVfdGV4dCgKICAgICAgICAgICAgICAgICAgICAgICAgcmVhZF9qdW1wX3JlYWRfdGV4dCwgInVybDogZG9tYWluKyciLCAiJywiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIGlmIHJlYWRKdW1wUGF0aDoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWFkSnVtcFBhdGggPSByZWFkSnVtcFBhdGgKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYi6LSm5Y+3W3tzZWxmLm5hbWV9XSDliJ3lp4vljJblpLHotKXvvIzor7fmiYvliqjorr/pl67kuIvnoa7orqTpobXpnaLmsqHltKnmuoMg5oiW6ICFIOeojeWQjuWGjeivleWQp++8jOS4gOebtOS4jeihjO+8jOivt+WJjeW+gFRH576k5Y+N6aaIfiAiCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGlmICLlrZjlnKjov53op4Tmk43kvZwiIGluIGh0bWx0ZXh0OgogICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV0g6KKr5qOA5rWL5Yiw5LqG77yM5bey57uP6KKr5bCB77yM57uI5q2i5Lu75Yqh77yM5b+r5Y675o+Q6YaS5aSn5a625ZCnfiAiKQogICAgICAgICAgICAgICAgICAgICAgICBzeXMuZXhpdCgwKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZiLotKblj7dbe3NlbGYubmFtZX1dIOWIneWni+WMluWksei0pe+8jOivt+aJi+WKqOiuv+mXruS4i+ehruiupOmhtemdouayoeW0qea6gyDmiJbogIUg56iN5ZCO5YaN6K+V5ZCn77yM5LiA55u05LiN6KGM77yM6K+35YmN5b6AVEfnvqTlj43ppoh+ICIKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYucmVhZEp1bXBQYXRoID0gIi9oYW9iYW9iYW8vd3RtcGRvbWFpbjIiCiAgICAgICAgICAgICMgIyDojrflj5bmj5DnjrDpobXpnaLlnLDlnYAKICAgICAgICAgICAgciA9IHNhZmVfcmVxdWVzdCgKICAgICAgICAgICAgICAgICJHRVQiLAogICAgICAgICAgICAgICAgZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9L2hhb2Jhb2Jhby93aXRoZHJhdyIsCiAgICAgICAgICAgICAgICBoZWFkZXJzPXsKICAgICAgICAgICAgICAgICAgICAiVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0cyI6ICIxIiwKICAgICAgICAgICAgICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA3LjAuMC4wIFNhZmFyaS81MzcuMzYgTmV0VHlwZS9XSUZJIE1pY3JvTWVzc2VuZ2VyLzcuMC4yMC4xNzgxKDB4NjcwMDE0M0IpIFdpbmRvd3NXZWNoYXQoMHg2MzA5MDcxZCkgWFdFQi84NDYxIEZsdWUiLAogICAgICAgICAgICAgICAgICAgICJBY2NlcHQiOiAidGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45IiwKICAgICAgICAgICAgICAgICAgICAiQWNjZXB0LUVuY29kaW5nIjogImd6aXAsIGRlZmxhdGUiLAogICAgICAgICAgICAgICAgICAgICJBY2NlcHQtTGFuZ3VhZ2UiOiAiemgtQ04semg7cT0wLjkiLAogICAgICAgICAgICAgICAgICAgICJDb29raWUiOiBzZWxmLkNvb2tpZSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB2ZXJpZnk9RmFsc2UsCiAgICAgICAgICAgICkKICAgICAgICAgICAgaHRtbHRleHQgPSByLnRleHQKICAgICAgICAgICAgc2lnbmlkbCA9IHJlLnNlYXJjaCgncmVxdWVzdF9pZCA9ICIoLio/KSInLCBodG1sdGV4dCkKICAgICAgICAgICAgaWYgc2lnbmlkbCA9PSBbXToKICAgICAgICAgICAgICAgIGlmIG15a2t5ZFJlYWRQdXJlTG9nID09IEZhbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeWIneWni+WMliDmj5DnjrDlj4LmlbAg5aSx6LSl77yM5bCd6K+V5Y+m5LiA56eN5Yid5aeL5YyWID4+PiAiKQogICAgICAgICAgICAgICAgciA9IHNhZmVfcmVxdWVzdCgKICAgICAgICAgICAgICAgICAgICAiR0VUIiwKICAgICAgICAgICAgICAgICAgICBmImh0dHBzOi8vY29kZS5zeXdqbWxvdS5jb20uY24vYmFvYmFvY29kZS5waHAiLAogICAgICAgICAgICAgICAgICAgIHZlcmlmeT1GYWxzZSwKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIGRvbW5haW5Ib3N0ID0gci5qc29uKClbImRhdGEiXVsibHVvZGkiXS5zcGxpdCgiLyIpWzJdCiAgICAgICAgICAgICAgICByID0gc2FmZV9yZXF1ZXN0KAogICAgICAgICAgICAgICAgICAgICJHRVQiLAogICAgICAgICAgICAgICAgICAgIGYiaHR0cDovL3tkb21uYWluSG9zdH0vaGFvYmFvYmFvL3dpdGhkcmF3IiwKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzPXsKICAgICAgICAgICAgICAgICAgICAgICAgIlVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHMiOiAiMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJVc2VyLUFnZW50IjogIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMDcuMC4wLjAgU2FmYXJpLzUzNy4zNiBOZXRUeXBlL1dJRkkgTWljcm9NZXNzZW5nZXIvNy4wLjIwLjE3ODEoMHg2NzAwMTQzQikgV2luZG93c1dlY2hhdCgweDYzMDkwNzFkKSBYV0VCLzg0NjEgRmx1ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJBY2NlcHQiOiAidGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45IiwKICAgICAgICAgICAgICAgICAgICAgICAgIkFjY2VwdC1FbmNvZGluZyI6ICJnemlwLCBkZWZsYXRlIiwKICAgICAgICAgICAgICAgICAgICAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aDtxPTAuOSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJDb29raWUiOiBzZWxmLkNvb2tpZSwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHZlcmlmeT1GYWxzZSwKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIGh0bWx0ZXh0ID0gci50ZXh0CiAgICAgICAgICAgICAgICBzaWduaWRsID0gcmUuc2VhcmNoKCdyZXF1ZXN0X2lkID0gIiguKj8pIicsIGh0bWx0ZXh0KQogICAgICAgICAgICAgICAgaWYgc2lnbmlkbCA9PSBbXToKICAgICAgICAgICAgICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV0g5aSa5qyh5Yid5aeL5YyWIOaPkOeOsOWPguaVsCDlpLHotKUsIOi0puWPt+W8guW4uO+8jOivt+ajgOafpUNvb2tpZe+8gSIpCiAgICAgICAgICAgICAgICAgICAgciA9IHNhZmVfcmVxdWVzdCgKICAgICAgICAgICAgICAgICAgICAgICAgIkdFVCIsCiAgICAgICAgICAgICAgICAgICAgICAgIGYiaHR0cHM6Ly9jb2RlLnN5d2ptbG91LmNvbS5jbi9iYW9iYW9jb2RlLnBocCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZlcmlmeT1GYWxzZSwKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgc2VsZi5kb21uYWluSG9zdCA9IHIuanNvbigpWyJkYXRhIl1bImx1b2RpIl0uc3BsaXQoIi8iKVsyXQogICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBzZWxmLnJlcXVlc3RfaWQgPSBzaWduaWRsWzFdCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLnJlcXVlc3RfaWQgPSBzaWduaWRsWzFdCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAjIHJhaXNlIGUKICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d5Yid5aeL5YyW5aSx6LSlLOivt+ajgOafpeS9oOeahGNrIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIHJ1bihzZWxmKToKICAgICAgICBpZiBzZWxmLmluaXQoKToKICAgICAgICAgICAgc2VsZi51c2VyX2luZm8oKQogICAgICAgICAgICBzZWxmLmdvbGQoKQogICAgICAgICAgICBpZiAi55u05o6l5o+QIiBub3QgaW4gc2VsZi5uYW1lOgogICAgICAgICAgICAgICAgc2VsZi5yZWFkKCkKICAgICAgICAgICAgICAgICMg5aaC5p6c5o6l5Y+j5bSp5LqG77yM5bCx5bCd6K+V5LiJ5qyh6YeN5ZCv6ZiF6K+7CiAgICAgICAgICAgICAgICBpZiBzZWxmLnJldHJ5UmVhZGluZyA9PSBUcnVlOgogICAgICAgICAgICAgICAgICAgIGlmIG15a2t5ZFJlYWRQdXJlTG9nID09IEZhbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV0g5qOA5rWL5Yiw6ZiF6K+75o6l5Y+j5byC5bi477yM5bCd6K+V6YeN6K+VfiIpCiAgICAgICAgICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UoMyk6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVhZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICMg6ZqP5py65bu26L+fCiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAocmFuZG9tLnJhbmRvbSgpICogMyArIDEpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHNlbGYucmV0cnlSZWFkaW5nID09IEZhbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgICAgIHNlbGYuZ29sZCgpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgc2VsZi53aXRoZHJhdygpCgoKZGVmIGdldE5ld0ludml0ZVVybCgpOgogICAgciA9IHNhZmVfcmVxdWVzdCgKICAgICAgICAiR0VUIiwgImh0dHBzOi8vY29kZS5zeXdqbWxvdS5jb20uY24vYmFvYmFvY29kZS5waHAiLCB2ZXJpZnk9RmFsc2UKICAgICkuanNvbigpCiAgICBpZiByLmdldCgiY29kZSIpID09IDA6CiAgICAgICAgbmV3RW50cnlVcmwgPSByLmdldCgiZGF0YSIpLmdldCgibHVvZGkiKQogICAgICAgIHBhcnNlZF91cmwgPSB1cmxwYXJzZShuZXdFbnRyeVVybCkKICAgICAgICBob3N0ID0gcGFyc2VkX3VybC5ob3N0bmFtZQogICAgICAgIHJldHVybiBmImh0dHA6Ly9zMWk2LjFvYmcuc2hvcC9oYW9iYW9iYW8vYXV0aC81ODQ4N2YyOTE5ODVjNWYzMmMxNmIzYjAxYjk2YTkxMiIucmVwbGFjZSgKICAgICAgICAgICAgInMxaTYuMW9iZy5zaG9wIiwgaG9zdCBvciAiczFpNi4xb2JnLnNob3AiCiAgICAgICAgKQogICAgZWxzZToKICAgICAgICByZXR1cm4gImh0dHA6Ly9zMWk2LjFvYmcuc2hvcC9oYW9iYW9iYW8vYXV0aC81ODQ4N2YyOTE5ODVjNWYzMmMxNmIzYjAxYjk2YTkxMiIKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgIyBhcHBUb2tlbu+8mui/meS4quaYr+Whq3d4cHVzaGVy55qEYXBwVG9rZW4KICAgICMgdG9waWNJZHPvvJrov5nkuKrmmK93eHB1c2hlcueahHRvcGljSWRz5pS55oiQ5L2g6Ieq5bex55qECiAgICAjIOekuuS+izog5bm755SfI29aZEJwMDRwc2dvTjhkTjFFVF91bzgxTlRDMzEjMzAwMCNBVF9VeUlsYmoyMjIybnluRVNiTTJ2SnlBN0RybVVtVVhEIzExNjg2CiAgICBhY2NvdW50cyA9IG9zLmdldGVudigibXlra3lkIikKICAgIGludml0ZVVybCA9IGdldE5ld0ludml0ZVVybCgpCiAgICBpZiBhY2NvdW50cyBpcyBOb25lOgogICAgICAgIHByaW50KGYi5L2g5rKh5pyJ5aGr5YWlbXlra3lk77yM5ZKL6L+Q6KGM77yfXG7otbDkuIvpgoDor7flkZfvvJp7aW52aXRlVXJsfSIpCiAgICBlbHNlOgogICAgICAgICMg6I635Y+W546v5aKD5Y+Y6YeP55qE5YC877yM5bm25oyJ5oyH5a6a5a2X56ym5Liy5YiG5Ymy5oiQ5aSa5Liq6LSm5Y+355qE5Y+C5pWw57uE5ZCICiAgICAgICAgYWNjb3VudHNfbGlzdCA9IG9zLmVudmlyb24uZ2V0KCJteWtreWQiKS5zcGxpdCgiJiIpCgogICAgICAgICMg6L6T5Ye65pyJ5Yeg5Liq6LSm5Y+3CiAgICAgICAgbnVtX29mX2FjY291bnRzID0gbGVuKGFjY291bnRzX2xpc3QpCiAgICAgICAgbW9yZVRpcCA9ICIiCiAgICAgICAgaWYgcmVhZFBvc3REZWxheSA+IDA6CiAgICAgICAgICAgIG1vcmVUaXAgPSBmIuW3suiuvue9rueahOaOqOmAgeaWh+eroOetieW+heeCueWHu+aXtumXtOS4uiB7cmVhZFBvc3REZWxheX3np5IgIgogICAgICAgIHByaW50KAogICAgICAgICAgICBmIuW9k+WJjeiEmuacrOeJiOacrO+8muW5u+eUn+mtlOaUueiHqueUqOeJiCBWMS42MSBcbuW5u+eUn+aPkOekuu+8muiOt+WPluWIsCB7bnVtX29mX2FjY291bnRzfSDkuKrotKblj7cge21vcmVUaXB9XG7ms6jlhozlnLDlnYDvvJp7aW52aXRlVXJsfSIKICAgICAgICApCgogICAgICAgICMg6YGN5Y6G5omA5pyJ6LSm5Y+3CiAgICAgICAgZm9yIGksIGFjY291bnQgaW4gZW51bWVyYXRlKGFjY291bnRzX2xpc3QsIHN0YXJ0PTEpOgogICAgICAgICAgICAjIHByaW50KCJcbiIpCiAgICAgICAgICAgIHByaW50KCItIiAqIDUwKQogICAgICAgICAgICBwcmludChmIui0puWPt1t7YWNjb3VudC5zcGxpdCgnIycpWzBdfV3lvIDlp4vmiafooYzku7vliqEgPj4+IikKICAgICAgICAgICAgIyBwcmludCgiXG4iKQogICAgICAgICAgICAjIOaMiUDnrKblj7fliIblibLlvZPliY3otKblj7fnmoTkuI3lkIzlj4LmlbAKICAgICAgICAgICAgdmFsdWVzID0gYWNjb3VudC5zcGxpdCgiIyIpCiAgICAgICAgICAgICMgcHJpbnQodmFsdWVzKQogICAgICAgICAgICBjZyA9IHt9CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGlmIGxlbih2YWx1ZXMpID09IDI6CiAgICAgICAgICAgICAgICAgICAgY2cgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogdmFsdWVzWzBdLAogICAgICAgICAgICAgICAgICAgICAgICAiQ29va2llIjogdmFsdWVzWzFdLAogICAgICAgICAgICAgICAgICAgICAgICAidHhieiI6IDMwMDAsCiAgICAgICAgICAgICAgICAgICAgICAgICJhbGlBY2NvdW50IjogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhbGlOYW1lIjogIiIsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBjZyA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiB2YWx1ZXNbMF0sCiAgICAgICAgICAgICAgICAgICAgICAgICJDb29raWUiOiB2YWx1ZXNbMV0sCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eGJ6IjogdmFsdWVzWzJdIG9yIDMwMDAsCiAgICAgICAgICAgICAgICAgICAgICAgICJhbGlBY2NvdW50IjogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhbGlOYW1lIjogIiIsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAjIOWkhOeQhuW8guW4uAogICAgICAgICAgICAgICAgcHJpbnQoIuW5u+eUn+mAvOmAvOWPqDoiLCAi6YWN572u55qE5ZWl546p5oSP77yM57y65Y+C5pWw5LqG5oao5om577yM55yL5riF6ISa5pys6K+05piO77yBIikKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIGNnWyJhcHBUb2tlbiJdID0gIiIKICAgICAgICAgICAgY2dbInRvcGljSWRzIl0gPSAiIgogICAgICAgICAgICAjIHByaW50KCLmiYvliqjvvJoiLCBsZW4odmFsdWVzKSwgdmFsdWVzWzRdKQogICAgICAgICAgICBpZiBsZW4odmFsdWVzKSA+PSA0OgogICAgICAgICAgICAgICAgaWYgdmFsdWVzWzNdOgogICAgICAgICAgICAgICAgICAgIGNnWyJhcHBUb2tlbiJdID0gdmFsdWVzWzNdCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBjZ1siYXBwVG9rZW4iXSA9IHd4cHVzaGVyQXBwVG9rZW4KICAgICAgICAgICAgaWYgbGVuKHZhbHVlcykgPj0gNToKICAgICAgICAgICAgICAgIGlmIHZhbHVlc1s0XToKICAgICAgICAgICAgICAgICAgICBjZ1sidG9waWNJZHMiXSA9IHZhbHVlc1s0XQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgY2dbInRvcGljSWRzIl0gPSB3eHB1c2hlclRvcGljSWQKICAgICAgICAgICAgaWYgbGVuKHZhbHVlcykgPj0gNjoKICAgICAgICAgICAgICAgIGlmIHZhbHVlc1s1XToKICAgICAgICAgICAgICAgICAgICBjZ1siYWxpTmFtZSJdID0gdmFsdWVzWzVdCiAgICAgICAgICAgIGlmIGxlbih2YWx1ZXMpID49IDc6CiAgICAgICAgICAgICAgICBpZiB2YWx1ZXNbNl06CiAgICAgICAgICAgICAgICAgICAgY2dbImFsaUFjY291bnQiXSA9IHZhbHVlc1s2XQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBpZiB3ZWNoYXRCdXNzaW5lc3NLZXkgPT0gIiI6CiAgICAgICAgICAgICAgICAgICAgaWYgY2dbImFwcFRva2VuIl0uc3RhcnRzd2l0aCgiQVRfIikgPT0gRmFsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYi5bm755Sf5o+Q56S677yM6LSm5Y+3W3thY2NvdW50LnNwbGl0KCcjJylbMF19XSB3eHB1c2gg6YWN572u6ZSZ6K+v77yM5b+r5LuU57uG55yL5aS06YOo6K+05piO77yBIikKICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICBpZiAoY2dbImFwcFRva2VuIl0uc3RhcnRzd2l0aCgiQVRfIikgPT0gRmFsc2UpIG9yICgKICAgICAgICAgICAgICAgICAgICAgICAgY2dbInRvcGljSWRzIl0uaXNkaWdpdCgpID09IEZhbHNlCiAgICAgICAgICAgICAgICAgICAgKToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLlubvnlJ/mj5DnpLrvvIzotKblj7dbe2FjY291bnQuc3BsaXQoJyMnKVswXX1dIHd4cHVzaCDphY3nva7plJnor6/vvIzlv6vku5Tnu4bnnIvlpLTpg6jor7TmmI7vvIEiKQogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgYXBpID0gSEhZRChjZykKICAgICAgICAgICAgICAgIGlmIGNnWyJhbGlOYW1lIl0gYW5kIGNnWyJhbGlBY2NvdW50Il06CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGYi5bm755Sf5o+Q56S677yM6LSm5Y+3W3thY2NvdW50LnNwbGl0KCcjJylbMF19XSDph4fnlKjkuoYg5pSv5LuY5a6d5o+Q546w77yM5aeT5ZCN77yae2NnWydhbGlOYW1lJ11977yM6LSm5oi377yae2NnWydhbGlBY2NvdW50J119IgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLlubvnlJ/mj5DnpLrvvIzotKblj7dbe2FjY291bnQuc3BsaXQoJyMnKVswXX1dIOmHh+eUqOS6hiDlvq7kv6Hmj5DnjrAiKQogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIGFwaS5ydW4oKQogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgIHByaW50KGYi5bm755Sf5o+Q56S677yM6LSm5Y+3W3thY2NvdW50LnNwbGl0KCcjJylbMF19XSDmiafooYzlh7rplJnvvJoiLCBlKQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICBmIuW5u+eUn+aPkOekuu+8jOi0puWPt1t7YWNjb3VudC5zcGxpdCgnIycpWzBdfV0g5Ye66ZSZ5ZWm77yM5Lmf6K645piv5bmz5Y+w5o6l5Y+j6Zeu6aKY77yM5Y+v5Lul6L+H5LiA5Lya5bCd6K+V6YeN5paw6L+Q6KGM77yM5aaC5p6c6L+Y5piv5LiN6KGM77yM6K+35bCG5LiL6Z2i5oql6ZSZ5oiq5Zu+5Y+R5YiwdGfkuqTmtYHnvqQ6IgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgcmFpc2UgZQogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgIyBwcmludCgiXG4iKQogICAgICAgICAgICBwcmludCgiLSIgKiA1MCkKICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe2FjY291bnQuc3BsaXQoJyMnKVswXX1d5omn6KGM5Lu75Yqh5a6M5q+V77yBIikKICAgICAgICAgICAgIyBwcmludCgiXG4iKQo='))
except Exception as e:
    print('脚本执行出错:', str(e))
